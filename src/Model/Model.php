<?php

namespace Hobord\MongoDb\Model;

use Illuminate\Database\Eloquent\Model as BaseModel;
use Hobord\MongoDb\Query\Builder as QueryBuilder;
use MongoDB\BSON\ObjectID;

abstract class Model extends BaseModel
{
//    use HybridRelations;
    /**
     * The connection name for the model.
     *
     * @var string
     */
    protected $connection = 'mongodb';

    /**
     * The primary key for the model.
     *
     * @var string
     */
    protected $primaryKey = '_id';

    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table;

    /**
     * The number of models to return for pagination.
     *
     * @var int
     */
    protected $perPage = 15;

    /**
     * The connection resolver instance.
     *
     * @var \Illuminate\Database\ConnectionResolverInterface
     */
    protected static $resolver;

    /**
     * The the attributes field class names.
     *
     * @var array
     */
    protected $schema = [];

    /**
     * the object fields.
     *
     * @var array
     */
    protected $attributes = [];

    /**
     * Is object changed?
     *
     * @var boolean
     */
    protected $isChanged = false;

    /**
     * The parent relation instance.
     *
     * @var Relation
     */
    protected $parentRelation;

    /**
     * Parent object;
     *
     * @var object
     */
    protected $parent_object = null;

    /**
     * The array of booted models.
     *
     * @var array
     */
    protected static $booted = [];

    /**
     * The array of global scopes on the model.
     *
     * @var array
     */
    protected static $globalScopes = [];

    public function touch()
    {
//        return parent::touch(); // TODO: Change the autogenerated stub
    }

    /**
     * Custom accessor for the model's id.
     *
     * @param  mixed  $value
     * @return mixed
     */
    public function getIdAttribute($value)
    {
        // If we don't have a value for 'id', we will use the Mongo '_id' value.
        // This allows us to work with models in a more sql-like way.
        if (! $value and array_key_exists('_id', $this->attributes)) {
            $value = $this->attributes['_id'];
        }
        // Convert ObjectID to string.
        if ($value instanceof ObjectID) {
            return (string) $value;
        }
        return $value;
    }

    /**
     * Get an attribute from the model.
     *
     * @param  string  $key
     * @return mixed
     */
    public function getAttribute($key)
    {
        if (array_key_exists($key, $this->attributes)) {
            return $this->attributes[$key];
        }
    }

    /**
     * Set a given attribute on the model.
     *
     * @param  string  $key
     * @param  mixed  $value
     * @return $this
     */
    public function setAttribute($key, $value)
    {
        // Convert _id to ObjectID.
        if ($key == '_id' and is_string($value)) {
            $builder = $this->newBaseQueryBuilder();
            $value = $builder->convertKey($value);
        }
        // Support keys in dot notation.
        elseif (str_contains($key, '.')) {
            if (in_array($key, $this->getDates()) && $value) {
                $value = $this->fromDateTime($value);
            }
            array_set($this->attributes, $key, $value);
            return;
        }

        $this->fireModelEvent('setAttributeBefore', [$key, $value]);

        if(array_key_exists($key, $this->schema)) {
            if(!is_object($value)) {
                $value = new $this->schema[$key]($value, $this);
            }
        }

        $this->attributes[$key] = $value;

        $this->fireModelEvent('setAttributeAfter', [$key, $value]);
        $this->touch();
    }


    /**
     * Dynamically retrieve attributes on the model.
     *
     * @param  string  $key
     * @return mixed
     */
    public function __get($key)
    {
        return $this->getAttribute($key);
    }

    /**
     * Dynamically set attributes on the model.
     *
     * @param  string  $key
     * @param  mixed  $value
     * @return void
     */
    public function __set($key, $value)
    {
        $this->setAttribute($key, $value);
    }

    /**
     * Fill attributes on the model.
     *
     * @param  array $attributes
     * @return void
     */
    public function fill(array $attributes = [])
    {
        foreach ($attributes as $key => $attribute) {
            $this->setAttribute($key, $attribute);
        }
    }

    /**
     * Convert the model instance to JSON.
     *
     * @param  int  $options
     * @return string
     */
    public function toJson($options = 0)
    {
        return json_encode($this->jsonSerialize(), $options);
    }

    /**
     * Convert the object into something JSON serializable.
     *
     * @return array
     */
    public function jsonSerialize()
    {
        return $this->toArray();
    }

    /**
     * Convert the model instance to an array.
     *
     * @return array
     */
    public function toArray()
    {
        $attributes = $this->attributesToArray();

        return array_merge($attributes, $this->relationsToArray());

        $result = [];
        foreach ($this->attributes as $key => $attribute) {
            if(is_object($attribute)) {
                $attribute = $attribute->toArray();
            }
            $result[$key] = $attribute;
        }
        return $result;
    }

    /**
     * Create a new Eloquent query builder for the model.
     *
     * @param  \Hobord\MongoDb\Query\Builder $query
     * @return \Hobord\MongoDb\Model\Builder|static
     */
    public function newEloquentBuilder($query)
    {
        return new Builder($query);
    }
    /**
     * Get a new query builder instance for the connection.
     *
     * @return Builder
     */
    protected function newBaseQueryBuilder()
    {
        $connection = $this->getConnection();
        return new QueryBuilder($connection, $connection->getPostProcessor());
    }

    /**
     * Convert the model's attributes to an array.
     *
     * @return array
     */
    public function attributesToArray()
    {

//        $attributes = parent::attributesToArray();
        $attributes = $this->attributes;
//        dd($attributes);
        foreach ($attributes as $key => &$value) {
            if ($value instanceof ObjectID) {
                $value = (string) $value;
            }
            if (is_subclass_of($value, 'Hobord\MongoDb\Model\Field')) {
                $value = $value->ToArray();
            }
        }
        // Convert dot-notation dates.
//        foreach ($this->getDates() as $key) {
//            if (str_contains($key, '.') and array_has($attributes, $key)) {
//                array_set($attributes, $key, (string) $this->asDateTime(array_get($attributes, $key)));
//            }
//        }
        return $attributes;
    }

    /**
     * Handle dynamic method calls into the model.
     *
     * @param  string  $method
     * @param  array  $parameters
     * @return mixed
     */
    public function __call($method, $parameters)
    {
        // Unset method
        if ($method == 'unset') {
            return call_user_func_array([$this, 'drop'], $parameters);
        }
        return parent::__call($method, $parameters);
    }


}